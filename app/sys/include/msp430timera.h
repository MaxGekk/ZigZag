#ifndef     _MSP430TIMERA_H
#define     _MSP430TIMERA_H
/*! @file   msp430timera.h
 *  @brief  Регистры и константы таймера А
 *  @author Max Gekk
 *  @date   декабрь 2007
 *  @version 1
 */   

#include    <inttypes.h>

/*Регистр управления таймером A */
volatile    uint16_t    TACTL   asm("0x0160");
/* Счётчик таймера A */
volatile    uint16_t    TAR     asm("0x0170");

/* Регистр 0 управления захватом/сравнением таймера А */
volatile    uint16_t    TACCTL0 asm("0x0162");
/* Регистр 0 захвата/сравнения таймера А */
volatile    uint16_t    TACCR0  asm("0x0172");

/* Регистр 1 управления захватом/сравнением таймера А */
volatile    uint16_t    TACCTL1 asm("0x0164");
/* Регистр 1 захвата/сравнения таймера А */
volatile    uint16_t    TACCR1  asm("0x0174");

/* Регистр 2 управления захватом/сравнением таймера А */
volatile    uint16_t    TACCTL2 asm("0x0166");
/* Регистр 2 захвата/сравнения таймера А */
volatile    uint16_t    TACCR2  asm("0x0176");

/* Вектор прерывания таймера А */
volatile    uint16_t    TAIV    asm("0x012E");

/* Константы регистра TACTL */
#define     TAIFG       0x0001      /* Флаг прерывания Таймера А. 0 - прерывание не ожидается, 1 - ожидается прерывание */
#define     TAIE        0x0002      /* Разрешение прерывания от таймера А */
#define     TACLR       0x0004      /* Очистка таймера А. Установка этого бита сбрасывает TAR, IDx и направление счёта */ 
#define     MC_00       (0<<4)      /* Режим остановка: таймер остановлен */
#define     MC_01       (1<<4)      /* Режим "вверх": таймер считает вверх к TACCR0 */
#define     MC_10       (2<<4)      /* Непрерывный режим: таймер считает вверх к 0xFFFF */
#define     MC_11       (3<<4)      /* Режим вверх/вниз: таймер считает вверх к TACCR0, затем вниз к 0x0000 */
#define     ID_00       (0<<6)      /* Делитель /1 */
#define     ID_01       (1<<6)      /* Делитель /2 */
#define     ID_10       (2<<6)      /* Делитель /4 */
#define     ID_11       (3<<6)      /* Делитель /8 */
#define     TASSEL_00   (0<<8)      /* Источник тактирования TACTL */
#define     TASSEL_01   (1<<8)      /* Источник тактирования ACTL */
#define     TASSEL_10   (2<<8)      /* Источник тактирования SMCLK */
#define     TASSEL_11   (3<<8)      /* Источник тактирования INCLK */

/* Константы регистров TACCTL */
#define     CCIFG       0x0001      /* Флаг прерывания захвата/сравнения */
#define     COV         0x0002      /* Переполнение захвата */
#define     OUT         0x0004      /* Этот бит указывает состояние выхода */
#define     CCIE        0x0010      /* Разрешение прерывания по захвату/сравнению */
#define     OUTMOD_000  (0<<5)      /* Значение бита OUT */
#define     OUTMOD_001  (1<<5)      /* Установка */
#define     OUTMOD_010  (2<<5)      /* Переключение/сброс */
#define     OUTMOD_011  (3<<5)      /* Установка/сброс */
#define     OUTMOD_100  (4<<5)      /* Переключение */
#define     OUTMOD_101  (5<<5)      /* Сброс */
#define     OUTMOD_110  (6<<5)      /* Переключение/установка */
#define     OUTMOD_111  (7<<5)      /* Сброс/установка */
#define     CAP         0x0100      /* 0 - режим сравнения, 0 - режим захвата */
#define     SCCI        0x0400      /* Синхронизация входа захвата/сравнения */
#define     SCS         0x0800      /* Синхронизация источника захвата */
#define     CCIS_A      (0<<12)     /* Входной сигнал CCIxA */
#define     CCIS_B      (1<<12)     /* Входной сигнал CCIxB */
#define     CCIS_GND    (2<<12)     /* Входной сигнал GND */
#define     CCIS_VCC    (3<<12)     /* Входной сигнал VCC */
#define     CM_00       (0<<14)     /* Нет захвата */
#define     CM_01       (1<<14)     /* Захват по фронту */
#define     CM_10       (2<<14)     /* Захват по спаду */
#define     CM_11       (3<<14)     /* Захват как по спаду, так и по фронту */

#endif  /*  _MSP430TIMERA_H */

