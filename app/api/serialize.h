//  vim:encoding=utf-8
#ifndef     _ZZ_SERIALIZE_H
#define     _ZZ_SERIALIZE_H
/*! @file   serialize.h
 *  @brief  Интерфейс сериализации
 *  @author Max Gekk
 *  @date   декабрь 2007
 *  @version 1
 *
 *      Интерфейс предназначен для формирования и разбора пакетов ( сообщений ).
 *  Пример использования:
 *      len = serialize( buf, MSG_JOIN_BODY_SIZE,
 *          "8:1:2:8:", sys_time(), MSG_JOIN, short_addr, ext_addr  );
 *      if( MSG_JOIN_BODY_SIZE != len )
 *          // Обработка ошибки
 *
 * */

/*! @fn size_t serialize( void *dst, size_t max_size, const char *fmt, ... );
 *  @brief  Превращение переменного числа аргументов в последовательность байт в соответствии со 
 *      строкой-спецификатором.
 *  @param  dst - указатель на область памяти, в которую будет записана последовательность байт
 *  @param  max_size - объём памяти, доступной для записи по указателю dst. Аргумент равен объёму памяти
 *  в байтах.
 *  @param  fmt - строка-спецификатор. В общем виде спицификатор выглядит следующим образом
 *      "<размер аргумента 1>:<размер аргумента 2>: ... <размер аргумента N>:". 
 *  Допустимы следующие размеры аргументов: 1,2,4,8.
 *  @return Функция возвращает число реально записанных байт по указателю dst.
 * */
size_t serialize( void *dst, size_t max_size, const char *fmt, ... );

/*! @fn size_t deserialize( const void *src, size_t size, const char *fmt, ... );
 *  @brief  Функция, обратная serialize. Превращение последовательности байт в совокупность значений
 *  в соответствии со строкой-спецификатором.
 *  @param  src - указатель на область памяти, из которой будет взята последовательность байт
 *  @param  size - суммарный размер всех извлекаемых из последовательности байт значений 
 *  @param  fmt - строка-спецификатор. Формат спецификатора совпадает с форматом спецификатора функции serialize.
 *  @return Размер не извлечённых из последовательности байт.
 * */
size_t deserialize( const void *src, size_t size, const char *fmt, ... );

#endif  /*  _ZZ_SERIALIZE_H */

