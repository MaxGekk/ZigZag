OUTPUT_FORMAT("elf32-msp430","elf32-msp430","elf32-msp430")
OUTPUT_ARCH(msp:16)

MEMORY {
    ZIGZAG_INFOMEM      (r)     :   ORIGIN = 0x1000,    LENGTH = 128
    MODULE_INTERFACE    (rx)    :   ORIGIN = 0x4000,    LENGTH = 256
    ZIGZAG_RAM          (rw)    :   ORIGIN = 0x1900,    LENGTH = 8K
    ZIGZAG_FLASH        (rx)    :   ORIGIN = 0x8a00,    LENGTH = 0x7300
    ZIGZAG_INTERFACE    (rx)    :   ORIGIN = 0xfd00,    LENGTH = 256
    VECTORS             (r)     :   ORIGIN = 0xffe0,    LENGTH = 32
}

SECTIONS {

PROVIDE( __stop_progExec__ = 0 );

/* Read-only sections, merged into text segment.  */
.hash          : { *(.hash)             }
.dynsym        : { *(.dynsym)           }
.dynstr        : { *(.dynstr)           }
.gnu.version   : { *(.gnu.version)      }
.gnu.version_d   : { *(.gnu.version_d)  }
.gnu.version_r   : { *(.gnu.version_r)  }
.rel.init      : { *(.rel.init) }
.rela.init     : { *(.rela.init) }

.rel.text      :
{
    *(.rel.text)
    *(.rel.text.*)
    *(.rel.gnu.linkonce.t*)
}

.rela.text     :
{
    *(.rela.text)
    *(.rela.text.*)
    *(.rela.gnu.linkonce.t*)
}
.rel.fini      : { *(.rel.fini) }
.rela.fini     : { *(.rela.fini) }

.rel.rodata    :
{
    *(.rel.rodata)
    *(.rel.rodata.*)
    *(.rel.gnu.linkonce.r*)
}

.rela.rodata   :
{
    *(.rela.rodata)
    *(.rela.rodata.*)
    *(.rela.gnu.linkonce.r*)
}

.rel.data      :
{
    *(.rel.data)
    *(.rel.data.*)
    *(.rel.gnu.linkonce.d*)
}

.rela.data     :
{
    *(.rela.data)
    *(.rela.data.*)
    *(.rela.gnu.linkonce.d*)
}

.rel.ctors     : { *(.rel.ctors)        }
.rela.ctors    : { *(.rela.ctors)       }
.rel.dtors     : { *(.rel.dtors)        }
.rela.dtors    : { *(.rela.dtors)       }
.rel.got       : { *(.rel.got)          }
.rela.got      : { *(.rela.got)         }
.rel.bss       : { *(.rel.bss)          }
.rela.bss      : { *(.rela.bss)         }
.rel.plt       : { *(.rel.plt)          }
.rela.plt      : { *(.rela.plt)         }

.interface.zig : {
    *(.interface.zig)
} > ZIGZAG_INTERFACE

.interface.app : {
    __module_load = .;
    __app_init = .; . += 4;
    __process_irq = .; . += 4;
    __stimer_fired = .; . += 4;
    __atimer_fired = .; . += 4;
    __net_send_done = .; . += 4;
    __net_recv = .; . += 4;
    __net_enter = .; . += 4;
    __net_exit = .; . += 4;
    __net_child_join = .; . += 4;
    __net_child_leave = .; . += 4;
    __net_sleep = .; . += 4;
} > MODULE_INTERFACE

.infomem : {
    *(.infomem)
} > ZIGZAG_INFOMEM

/* Internal text space.  */
.text :
{
    *(.init)
    *(.init0)  /* Start here after reset.  */
    *(.init1)
    *(.init2)  /* Copy data loop  */
    *(.init3)
    *(.init4)  /* Clear bss  */
    *(.init5)
    *(.init6)  /* C++ constructors.  */
    *(.init7)
    *(.init8)
    *(.init9)  /* Call main().  */
     __ctors_start = . ;
     *(.ctors)
     __ctors_end = . ;
     __dtors_start = . ;
     *(.dtors)
     __dtors_end = . ;
    . = ALIGN(2);
    *(.text)
    . = ALIGN(2);
    *(.text.*)
    . = ALIGN(2);
    *(.fini9)  /*   */
    *(.fini8)
    *(.fini7)
    *(.fini6)  /* C++ destructors.  */
    *(.fini5)
    *(.fini4)
    *(.fini3)
    *(.fini2)
    *(.fini1)
    *(.fini0)  /* Infinite loop after program termination.  */
    *(.fini)
    _etext = .;
}  > ZIGZAG_FLASH

.data   : AT (ADDR (.text) + SIZEOF (.text))
{
    PROVIDE (__data_start = .) ;
    . = ALIGN(2);
    *(.data)
    . = ALIGN(2);
    *(.gnu.linkonce.d*)
    . = ALIGN(2);
     _edata = . ;
}  > ZIGZAG_RAM

.bss  SIZEOF(.data) + ADDR(.data) :
{
    PROVIDE (__bss_start = .) ;
    *(.bss)
    *(COMMON)
     PROVIDE (__bss_end = .) ;
     _end = . ;
}  > ZIGZAG_RAM

.noinit  SIZEOF(.bss) + ADDR(.bss) :
{
    PROVIDE (__noinit_start = .) ;
    *(.noinit)
    *(COMMON)
    PROVIDE (__noinit_end = .) ;
    _end = . ;
}  > ZIGZAG_RAM

.vectors  :
{
    PROVIDE (__vectors_start = .) ;
    *(.vectors*)
    _vectors_end = . ;
}  > VECTORS

/* Stabs for profiling information*/
.profiler 0 : { *(.profiler) }
/* Stabs debugging sections.  */
.stab 0 : { *(.stab) }
.stabstr 0 : { *(.stabstr) }
.stab.excl 0 : { *(.stab.excl) }
.stab.exclstr 0 : { *(.stab.exclstr) }
.stab.index 0 : { *(.stab.index) }
.stab.indexstr 0 : { *(.stab.indexstr) }
.comment 0 : { *(.comment) }
/* DWARF debug sections.
 Symbols in the DWARF debugging sections are relative to the beginning
 of the section so we begin them at 0.  */
/* DWARF 1 */
.debug          0 : { *(.debug) }
.line           0 : { *(.line) }
/* GNU DWARF 1 extensions */
.debug_srcinfo  0 : { *(.debug_srcinfo) }
.debug_sfnames  0 : { *(.debug_sfnames) }
/* DWARF 1.1 and DWARF 2 */
.debug_aranges  0 : { *(.debug_aranges) }
.debug_pubnames 0 : { *(.debug_pubnames) }
/* DWARF 2 */
.debug_info     0 : { *(.debug_info) *(.gnu.linkonce.wi.*) }
.debug_abbrev   0 : { *(.debug_abbrev) }
.debug_line     0 : { *(.debug_line) }
.debug_frame    0 : { *(.debug_frame) }
.debug_str      0 : { *(.debug_str) }
.debug_loc      0 : { *(.debug_loc) }
.debug_macinfo  0 : { *(.debug_macinfo) }

PROVIDE (__stack = 0x3900) ;
PROVIDE (__data_start_rom = _etext) ;
PROVIDE (__data_end_rom   = _etext + SIZEOF (.data)) ;
PROVIDE (__noinit_start_rom = _etext + SIZEOF (.data)) ;
PROVIDE (__noinit_end_rom = _etext + SIZEOF (.data) + SIZEOF (.noinit)) ;
PROVIDE (__subdevice_has_heap = 0) ;
}

